knitr::opts_chunk$set(message=FALSE, warning = FALSE, comment="", fig.height=4)
custdata <- read.table('custdata.tsv',
header=TRUE, sep='\t')
cross <- table(custdata$sex, custdata$marital.stat)
colnames(cross)[1] <- "Divorced"
colnames(cross) <- gsub(" ", "_", colnames(cross)) # get rid of spaces in column names (nuissance)
cross                              # cross as in crosstable
N <- sum(cross)
p.hat <- rowSums(cross)/N
q.hat <- colSums(cross)/N
q.hat    # marginals
p.hat
ind_probs <- matrix(nrow = nrow(cross),
ncol = ncol(cross))
for(j in 1:nrow(ind_probs)){
for(k in 1:ncol(ind_probs)){
ind_probs[j, k] <- p.hat[j] * q.hat[k]
}
}
ind_probs
expected_counts <- N * ind_probs  # benchmark NULL expectation
# single most likely table to have been produced if NULL is true
how_far <- function(observed, expected){
max(abs(observed - expected))
}
test_stat_MAD <- how_far(cross, expected_counts)
test_stat_MAD
one_season <- rmultinom(1, 82, list(win = .5, lose=.3, tie=.2))   # 82 hockey games in season
colnames(one_season) <- "season_totals"  # with population percentages: 50% wins, 30% losses, 20% ties
one_season
five_seasons <- rmultinom(5, 82, list(win = .5, lose=.3, tie=.2))
colnames(five_seasons) <- paste0("season", 1:5)
five_seasons
colSums(five_seasons)
rowMeans(five_seasons/82)   # sample percentages should resemble c(.5, .3, .2)
dim(cross)
nrow(cross) * ncol(cross)
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  ...)
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
hist(MAD_sims, xlim=c(0,100))
abline(v=test_stat_MAD)
p_MAD <- mean(MAD_sims > test_stat_MAD)
how_far <- function(observed, expected, metric){
if (metric == "MAD"){
return( max(abs(observed - expected)))
}
else if (metric == "Pearson")
{
}
}
how_far <- function(observed, expected, metric){
if (metric == "MAD"){
return( max(abs(observed - expected)))
}
else if (metric == "pearson")
{
return (sum((observed - expected)^2/expected))
}
}
?null_sims
how_far <- function(observed, expected, metric){
if (metric == "MAD"){
return( max(abs(observed - expected)))
}
else if (metric == "pearson")
{
return (sum((observed - expected)^2/expected))
}
}
test_stat_MAD <- how_far(cross, expected_counts, "pearsons")
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  ...)
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far("pearsons"))
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  ...)
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  "pearsons")
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
how_far <- function(observed, expected, metric){
if (metric == "MAD"){
return( max(abs(observed - expected)))
}
else if (metric == "pearson")
{
return (sum((observed - expected)^2/expected))
}
}
test_stat_MAD <- how_far(cross, expected_counts, "pearsons")
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  "pearsons")
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
how_far <- function(observed, expected, metric){
if (metric == "MAD"){
return( max(abs(observed - expected)))
}
else if (metric == "pearson")
{
return (sum((observed - expected)^2/expected))
}
}
test_stat_MAD <- how_far(cross, expected_counts, "pearsons")
how_far <- function(observed, expected){
max(abs(observed - expected))
}
test_stat_MAD <- how_far(cross, expected_counts)
test_stat_MAD
one_season <- rmultinom(1, 82, list(win = .5, lose=.3, tie=.2))   # 82 hockey games in season
colnames(one_season) <- "season_totals"  # with population percentages: 50% wins, 30% losses, 20% ties
one_season
five_seasons <- rmultinom(5, 82, list(win = .5, lose=.3, tie=.2))
colnames(five_seasons) <- paste0("season", 1:5)
five_seasons
colSums(five_seasons)
rowMeans(five_seasons/82)   # sample percentages should resemble c(.5, .3, .2)
dim(cross)
nrow(cross) * ncol(cross)
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  ...)
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far("pearsons"))
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  ...)
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far("pearson"))
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  ...)
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far))
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  ...)
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
MAD_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
hist(MAD_sims, xlim=c(0,100))
abline(v=test_stat_MAD)
p_MAD <- mean(MAD_sims > test_stat_MAD)
how_far <- function(observed, expected, metric){
if (metric == "MAD"){
return( max(abs(observed - expected)))
}
else if (metric == "pearson")
{
return (sum((observed - expected)^2/expected))
}
}
test_stat_pearson <- how_far(cross, expected_counts, "pearsons")
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  "pearson")
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
pearson_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
hist(MAD_sims, xlim=c(0,100))
abline(v=test_stat_MAD)
p_pearons <- mean(pearson_sims > test_stat_pearson)
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  "pearson")
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
pearson_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
hist(MAD_sims, xlim=c(0,100))
abline(v=test_stat_MAD)
p_pearsons <- mean(pearson_sims > test_stat_pearson)
independent_probs <- list()
for(j in 1:nrow(cross)){
for(k in 1:ncol(cross)){
independent_probs[[paste0(rownames(cross)[j], "_", colnames(cross)[k])]] <- p.hat[j] * q.hat[k]
}
}
independent_probs
one_sim <- rmultinom(1, N, independent_probs)
one_sim
matrix(one_sim, nrow=2, byrow=TRUE)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE, dimnames = dimnames(cross))
one_sim
null_sims <- function(Nsims, null_probs, expected, N, metric=how_far, ...){
sim_stats <- matrix(nrow=Nsims)
for(i in 1:Nsims){
one_sim <- rmultinom(1, N, null_probs)
one_sim <- matrix(one_sim, nrow=2, byrow=TRUE)
sim_stats[i] <- metric(one_sim, expected,  "pearson")
}
if(Nsims == 1) return(drop(sim_stats)) else return(sim_stats)
# if Nsims == 1, don't return the single point estimate as a matrix,
# which is less convenient for subsequent testing ...
}
pearson_sims <- null_sims(10000, independent_probs, expected_counts, N, how_far)
hist(MAD_sims, xlim=c(0,100))
abline(v=test_stat_MAD)
p_pearsons <- mean(pearson_sims > test_stat_pearson)
?rmultinorm
?rmultinom
one_sim
one_sim <- rmultinom(1, N, independent_probs)
one_sim
reference_dist = null_sims(5000, independent_probs, expected = expected_counts, N = sum(cross), metric = how_far, "MAD")
hist(reference_dist)
hist(p, main = "pvalues", xlim = c(0,1))
p = matrix(nrow = 1000)
for (i in 1:1000) {
p[i] = mean(reference_dist > null_sims(1, independent_probs, expected_counts, N = sum(cross, metric = how_far, "MAD")))
}
reference_dist = null_sims(5000, independent_probs, expected = expected_counts, N = sum(cross), metric = how_far, "MAD")
hist(reference_dist)
p = matrix(nrow = 1000)
for (i in 1:1000) {
p[i] = mean(reference_dist > null_sims(1, independent_probs, expected_counts, N = sum(cross), metric = how_far, "MAD"))
}
hist(p, main = "pvalues", xlim = c(0,1))
